import com.udacity.webcrawler.parser.PageParser;
import com.udacity.webcrawler.parser.PageParserFactory;

import java.time.Clock;
import java.time.Duration;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.RecursiveAction;
import java.util.regex.Pattern;

public class Task extends RecursiveAction{
    private final Clock clock;
    private final Duration timeout;
    private final String url;
    private final Instant deadline;
    private final int maxDepth;
    private final Map<String, Integer> counts;
    private final Set<String> visitedUrls;
    private final PageParserFactory pageParserFactory;
    private final List<Pattern> ignoredUrls;

    public Task(Clock clock, Duration timeout, String url, Instant deadline, int maxDepth, Map<String, Integer> counts,
                     Set<String> visitedUrls, PageParserFactory pageParserFactory, List<Pattern> ignoredUrls) {
        this.clock = clock;
        this.timeout = timeout;
        this.url = url;
        this.deadline = deadline;
        this.maxDepth = maxDepth;
        this.counts = counts;
        this.visitedUrls = visitedUrls;
        this.pageParserFactory = pageParserFactory;
        this.ignoredUrls = ignoredUrls;
    }
    /**
     * compute() method
     * crawlInternal method variant from SequentialWebCrawler in order to be parallelized
     * Adapted to use the Concurrent collection
     */
    @Override
    protected void compute() {
        if (maxDepth == 0 || clock.instant().isAfter(deadline)) {
            return;
        }
        for (Pattern pattern : ignoredUrls) {
            if (pattern.matcher(url).matches()) {
                return;
            }
        }
        if (visitedUrls.contains(url)) {
            return;
        }
        visitedUrls.add(url);
        PageParser.Result result = pageParserFactory.get(url).parse();
        for (ConcurrentMap.Entry<String, Integer> e : result.getWordCounts().entrySet()) {
            if (counts.containsKey(e.getKey())) {
                counts.put(e.getKey(), e.getValue() + counts.get(e.getKey()));
            } else {
                counts.put(e.getKey(), e.getValue());
            }
        }
        // Create a list of crawl tasks and then invoke all to be processed.
        List<Task> Tasks = new ArrayList<>();
        for (String link : result.getLinks()) {
            crawlTasks.add(new Task(clock, timeout, link, deadline, maxDepth - 1, counts
                    , visitedUrls, pageParserFactory, ignoredUrls));
        }
        invokeAll(Tasks);
    }
}
